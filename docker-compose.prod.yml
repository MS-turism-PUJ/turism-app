services:
  registry:
    build: ./registry
    ports:
      - 8761:8761
    restart: always
    container_name: registry
  config_server:
    build: ./config-server
    ports:
      - 8888:8888
    restart: always
    container_name: config-server
    depends_on:
      - registry
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.5
    ports:
      - 9000:8080
    restart: always
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    command: start-dev --import-realm --optimized
    volumes:
      - keycloak_data_volume:/opt/keycloak/data
      - ./keycloak:/opt/keycloak/data/import
    env_file:
      - .env
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  users_db:
    image: postgres:14-alpine
    user: ${DB_USER}
    restart: always
    healthcheck:
      test: "pg_isready -U ${DB_USER} --dbname=${USERS_DB_NAME}"
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: users_db
    ports:
      - ${USERS_DB_PORT}:5432
    environment:
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - users_db_volume:/var/lib/postgresql/data
    env_file:
      - .env
  services_db:
    image: postgres:14-alpine
    user: ${DB_USER}
    restart: always
    healthcheck:
      test: "pg_isready -U ${DB_USER} --dbname=${SERVICES_DB_NAME}"
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: services_db
    ports:
      - ${SERVICES_DB_PORT}:5432
    environment:
      POSTGRES_DB: ${SERVICES_DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - services_db_volume:/var/lib/postgresql/data
    env_file:
      - .env
  marketplace_db:
    image: postgres:14-alpine
    user: ${DB_USER}
    restart: always
    healthcheck:
      test: "pg_isready -U ${DB_USER} --dbname=${MARKETPLACE_DB_NAME}"
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: marketplace_db
    ports:
      - ${MARKETPLACE_DB_PORT}:5432
    environment:
      POSTGRES_DB: ${MARKETPLACE_DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - marketplace_db_volume:/var/lib/postgresql/data
    env_file:
      - .env
  apigateway:
    build: ./apigateway
    ports:
      - 8080:8080
    restart: always
    container_name: apigateway
    depends_on:
      - registry
      - config_server
      - keycloak
  minio:
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    container_name: minio
    ports:
      - "9001:9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data
  users:
    build: ./users
    ports:
      - 8081:8081
    restart: always
    container_name: users
    depends_on:
      - registry
      - config_server
      - keycloak
      - users_db
      - kafka
      - minio
  services:
    build: ./services
    ports:
      - 8082:8082
    restart: always
    container_name: services
    depends_on:
      - registry
      - config_server
      - services_db
      - kafka
  marketplace:
    build: ./marketplace
    ports:
      - 8083:8083
    restart: always
    container_name: marketplace
    depends_on:
      - registry
      - config_server
      - marketplace_db
      - kafka
  prometheus:
    image: prom/prometheus:v2.54.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_volume:/prometheus
    ports:
      - 9090:9090
    restart: always
    container_name: prometheus
  grafana:
    image: grafana/grafana:11.2.0-ubuntu
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    restart: always
    volumes:
      - grafana_data_volume:/var/lib/grafana
    container_name: grafana
  webapp:
    build: ./webapp
    ports:
      - 80:80
    restart: always
    container_name: webapp
    depends_on:
      - registry
      - config_server
      - keycloak
      - users
      - services
      - marketplace
      - apigateway
      - prometheus
      - grafana

volumes:
  users_db_volume:
  services_db_volume:
  marketplace_db_volume:
  keycloak_data_volume:
  prometheus_data_volume:
  grafana_data_volume:
  zookeeper_data:
  kafka_data:
  minio_data:
